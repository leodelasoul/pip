import pytest
import pathlib
import json
from pip._internal.exceptions import CollidingNameError, BadCommand
import pip._internal.utils.colliding_cmdarg_name as prevention_module
from Algos import Algos

arr2 = []


def create_typos_by_list():
    '''
    creates a stdout that can be copied to file, eg. savelist.txt, for completion this sourcecode
    is not deleted
    :return: existent packages that reside in pypi generated by Algos.generate_typo()
    '''
    arr = []
    dir_path = str(pathlib.Path(__file__).parent.absolute())

    dir_path1 = dir_path + "/bq-results-20200913-185937-p7wc4g8anuwo.json"
    dir_path = dir_path + "/top-pypi-packages-30-days.json"
    with open(dir_path1, "r") as file:
        for f in file:
            p = json.loads(f)
            arr2.append(p["name"])
    with open(dir_path, "r") as file:
        data = json.load(file)
        for p in data["rows"][:1000]:
            arr.extend(Algos.generate_typo(p["project"]))

    arr1 = []
    for i in arr:
        if i in arr2:
            arr1.append(i)
            print(i)
        else:
            continue
    return arr1


@pytest.fixture()
def create_typos():
    '''
    :return: existent packages that reside in pypi generated by Algos.generate_typo()
    '''
    dir_path = str(pathlib.Path(__file__).parent.absolute())
    arr = []
    dir_path = dir_path + "/savelist.txt"
    with open(dir_path, "r") as file:
        for f in file.readlines():
            arr.append(f.rstrip("\n"))
    return arr


def test_parameters(create_typos):
    '''
    prints data for prevention experiment
    :param create_typos: a pytest fixture
    :return: void
    '''
    arr = create_typos

    from pip import __main__ as pip
    pip.sys.argv[1] = "download"
    pip.sys.argv.append(arr[0])
    prevention_module.input = lambda x: "n"
    count = 0
    passed = 0
    for a in arr:
        try:
            # pip._main()                launches the actual client
            # pip.sys.argv[2] = a        and gives it the packagename to download
            if a == "":
                continue
            prevention_module.is_colliding(a)
            passed = passed + 1
        except CollidingNameError:
            count = count + 1
    print("blocked downloads/installs: " + str(count) + ", passed packagenames: " + str(passed) + ",cover rate: " + str(
        round(count / len(arr) * 100)) + "%")
    print(str(len(arr)) + " packages were tested")


def teardown_method(method):
    prevention_module.input = input
